org.sofa.opengl.akka {
  	surface-dispatcher {
		type       = "Dispatcher"
		executor   = "org.sofa.opengl.akka.SurfaceExecutorServiceConfigurator"
		throughput = 1
	}
}

#akka.scheduler.tick-duration = 10

akka {
	actor {
    	# Timeout for ActorSystem.actorOf
    	creation-timeout = 20s
  
    	# Serializes and deserializes (non-primitive) messages to ensure immutability,
    	# this is only intended for testing.
    	serialize-messages = off
 
    	# Serializes and deserializes creators (in Props) to ensure that they can be
    	# sent over the network, this is only intended for testing.
    	serialize-creators = off
 
    	default-dispatcher {
      		# Must be one of the following
      		# Dispatcher, (BalancingDispatcher, only valid when all actors using it are
     	 	# of the same type), PinnedDispatcher, or a FQCN to a class inheriting
     		# MessageDispatcherConfigurator with a public constructor with
      		# both com.typesafe.config.Config parameter and
      		# akka.dispatch.DispatcherPrerequisites parameters.
      		# PinnedDispatcher must be used toghether with executor=thread-pool-executor.
      		type = "Dispatcher"
 
      		# Which kind of ExecutorService to use for this dispatcher
      		# Valid options:
      		#  - "fork-join-executor" requires a "fork-join-executor" section
      		#  - "thread-pool-executor" requires a "thread-pool-executor" section
      		#  - A FQCN of a class extending ExecutorServiceConfigurator
      		executor = "fork-join-executor"
 
      		# This will be used if you have set "executor = "fork-join-executor""
      		fork-join-executor {
        		# Min number of threads to cap factor-based parallelism number to
        		parallelism-min = 8
 
        		# The parallelism factor is used to determine thread pool size using the
        		# following formula: ceil(available processors * factor). Resulting size
        		# is then bounded by the parallelism-min and parallelism-max values.
        		parallelism-factor = 3.0
 
        		# Max number of threads to cap factor-based parallelism number to
        		parallelism-max = 64
      		}
 
      		# This will be used if you have set "executor = "thread-pool-executor""
      		thread-pool-executor {
  		      	# Keep alive time for threads
        		keep-alive-time = 60s
 
        		# Min number of threads to cap factor-based core number to
        		core-pool-size-min = 8
 
        		# The core pool size factor is used to determine thread pool core size
        		# using the following formula: ceil(available processors * factor).
        		# Resulting size is then bounded by the core-pool-size-min and
        		# core-pool-size-max values.
        		core-pool-size-factor = 3.0
 
        		# Max number of threads to cap factor-based number to
        		core-pool-size-max = 64
 
        		# Minimum number of threads to cap factor-based max number to
        		# (if using a bounded task queue)
        		max-pool-size-min = 8
 
        		# Max no of threads (if using a bounded task queue) is determined by
        		# calculating: ceil(available processors * factor)
        		max-pool-size-factor  = 3.0
 
        		# Max number of threads to cap factor-based max number to
        		# (if using a  bounded task queue)
        		max-pool-size-max = 64
 
        		# Specifies the bounded capacity of the task queue (< 1 == unbounded)
        		task-queue-size = -1
 
        		# Specifies which type of task queue will be used, can be "array" or
        		# "linked" (default)
        		task-queue-type = "linked"
 
        		# Allow core threads to time out
        		allow-core-timeout = on
      		}
 
      		# How long time the dispatcher will wait for new actors until it shuts down
      		shutdown-timeout = 1s
 
      		# Throughput defines the number of messages that are processed in a batch
      		# before the thread is returned to the pool. Set to 1 for as fair as possible.
      		throughput = 5
 
      		# Throughput deadline for Dispatcher, set to 0 or negative for no deadline
      		throughput-deadline-time = 0ms
 
      		# If negative (or zero) then an unbounded mailbox is used (default)
	      	# If positive then a bounded mailbox is used and the capacity is set using
      		# the property
      		# NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead
      		# to deadlock, use with care
      		# The following mailbox-push-timeout-time is only used for type=Dispatcher
      		# and only if mailbox-capacity > 0
      		mailbox-capacity = -1
 
      		# Specifies the timeout to add a new message to a mailbox that is full -
      		# negative number means infinite timeout. It is only used for type=Dispatcher
      		# and only if mailbox-capacity > 0
      		mailbox-push-timeout-time = 10s
 
      		# FQCN of the MailboxType, if not specified the default bounded or unbounded
      		# mailbox is used. The Class of the FQCN must have a public constructor with
      		# (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
      		mailbox-type = ""
 
      		# For BalancingDispatcher: If the balancing dispatcher should attempt to
      		# schedule idle actors using the same dispatcher when a message comes in,
      		# and the dispatchers ExecutorService is not fully busy already.
      		attempt-teamwork = on
	 
    		# For Actor with Stash: The default capacity of the stash.
      		# If negative (or zero) then an unbounded stash is used (default)
      		# If positive then a bounded stash is used and the capacity is set using
      		# the property
      		stash-capacity = -1
    	}
    }

    # Used to set the behavior of the scheduler.
  	# Changing the default values may change the system behavior drastically so make
  	# sure you know what you're doing! See the Scheduler section of the Akka
  	# Documentation for more details.
  	scheduler {
    	# The HashedWheelTimer (HWT) implementation from Netty is used as the default
    	# scheduler in the system.
    	# HWT does not execute the scheduled tasks on exact time.
    	# It will, on every tick, check if there are any tasks behind the schedule
    	# and execute them. You can increase or decrease the accuracy of the execution
    	# timing by specifying smaller or larger tick duration.
    	# If you are scheduling a lot of tasks you should consider increasing the
    	# ticks per wheel.
    	# For more information see: http://www.jboss.org/netty/
    	# Note that it might take up to 1 tick to stop the Timer, so setting the
    	# tick-duration to a high value will make shutting down the actor system
    	# take longer.
    	tick-duration = 20s
 
    	# The timer uses a circular wheel of buckets to store the timer tasks.
    	# This should be set such that the majority of scheduled timeouts (for high
    	# scheduling frequency) will be shorter than one rotation of the wheel
    	# (ticks-per-wheel * ticks-duration)
    	# THIS MUST BE A POWER OF TWO!
    	ticks-per-wheel = 512
 
    	# This setting selects the timer implementation which shall be loaded at
    	# system start-up. Built-in choices are:
    	#  - akka.actor.DefaultScheduler (HWT)
    	#  - akka.actor.LightArrayRevolverScheduler
    	# (to be benchmarked and evaluated)
    	# The class given here must implement the akka.actor.Scheduler interface
    	# and offer a public constructor which takes three arguments:
    	#  1) com.typesafe.config.Config
    	#  2) akka.event.LoggingAdapter
    	#  3) java.util.concurrent.ThreadFactory
    	implementation = akka.actor.LightArrayRevolverScheduler
 
    	# When shutting down the scheduler, there will typically be a thread which
    	# needs to be stopped, and this timeout determines how long to wait for
    	# that to happen. In case of timeout the shutdown of the actor system will
    	# proceed without running possibly still enqueued tasks.
    	shutdown-timeout = 5s
  	}
}